import socket
import select
from typing import List, Dict
from handler import Handler
from rsa import RSA
import secrets


class Server():
  def __init__(self, host, port) -> None:
    self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    self.host = host
    self.port = port
    # 400 digits
    p = 1357911131517193133353739515355575971737577799193959799111113115117119131133135137139151153155157159171173175177179191193195197199311313315317319331333335337339351353355357359371373375377379391393395397399511513515517519531533535537539551553555557559571573575577579591593595597599711713715717719731733735737739751753755757759771
    q = 199999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999

    # 308 digits
    # p = 17055899557196527525682810191339089909014331959812898993437334555169285087976951946809555356817674844913188193949144165887100694620944167618997411049745043243260854998720061941490491091205087788373487296637817044103762239946752241631032791287021875863785226376406279424552454153388492970310795447866569138481
    # q = 171994050316145327367864378293770397343246561147593187377005295591120640129800725892235968688434055779668692095961697434700708550594137135605048681344218643671046905252163983827396726536078773766353616572531688390937410451433665914394068509329532352022301339189851111636176939179510955519440490431177444857017
    self.server_rsa = RSA(p, q)

    self.session_key = secrets.token_hex(16)

    self.client_keys: Dict[str, str] = {}
    self.client_threads: List[Handler] = []

  def __del__(self):
    self.server_socket.close()

  def connect(self) -> bool:
    try:
      self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
      try:
        self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
      except AttributeError:
        pass

      self.server_socket.bind((self.host, self.port))
      self.server_socket.listen(100)

      return True

    except Exception:
      return False

  def run(self):
    is_running = True

    while is_running:
      try:
        read_ready_sockets, _, _ = select.select([self.server_socket], [], [])

        for ready_socket in read_ready_sockets:
          if ready_socket == self.server_socket:
            client_socket, _ = self.server_socket.accept()

            client = Handler(client_socket, self.client_keys, self.server_rsa, self.session_key)
            client.start()
            self.client_threads.append(client)

      except:
        is_running = False

    self.server_socket.close()
    for client in self.client_threads:
      client.join()
